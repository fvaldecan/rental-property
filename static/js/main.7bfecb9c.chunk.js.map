{"version":3,"sources":["main/ClientNode.jsx","main/AdjList.jsx","main/List.jsx","main/Toolbar.jsx","main/Algorithms/AdjList.js","main/Algorithms/TopoSort.js","main/Algorithms/Optimal.js","main/RentalProp.jsx","main/HelperFunctions.js","App.js","serviceWorker.js","index.js"],"names":["Node","id","this","props","className","style","width","height","backgroundColor","color","borderRadius","viewBox","fill","d","fontSize","marginTop","clientNum","startDay","endDay","revenue","Component","list","map","clientNode","index","clientName","length","Number","key","display","neighbors","node","type","option","document","getElementById","onClick","openPopUp","closePopUp","tyle","incomingEdges","clientsTaken","copyNode","originalNode","copy","addEdge","client1","client2","client2Copy","push","animations","Queue","data","prototype","record","unshift","pop","first","front","size","pathAnimations","path","optimalRevenue","Visualizer","addAllClients","event","copyClientList","Object","assign","state","clientList","preventDefault","textareaValue","ReactDOM","findDOMNode","refs","ci","value","alert","resetClientList","userInputs","clients","split","includes","helperFunctions","i","clientCount","startEndRev","digits_only","string","every","c","indexOf","splice","clientInfo","resetAll","deleteButton","getElementsByClassName","adjListButton","speedButtons","setState","showPath","copyOptimalPath","optimalPath","copyAdjList","adjList","animation","clientID","newColor","setTimeout","children","speed","justifyContent","findOptimal","copyTopoList","topoList","reverse","count","counterName","vertex","topoListSize","maxRevenues","maxRev","topoClientName","topoClientNum","adjVertexClientName","revenues","rev","neighborList","neighborListSize","neighbor","neighborClientNum","neighborClientName","updatedRev","max","maxIndex","revenueSize","taken","slice","optPath","vertexName","j","console","log","optFunctions","optRev","innerHTML","hasOwnProperty","newRev","ClientNum","StartDay","EndDay","Revenue","IncomingEdges","Neighbors","ClientsTaken","topoArray","queue","adjListSize","topoName","topoFunctions","topoAnimations","newCount","adjArray","startNode","clientListSize","newClient","endNode","adjFunctions","adjAnimations","clientForm","clientSection","topoSortButton","str","RegExp","test","window","location","reload","rel","href","ref","cols","rows","placeholder","required","createTopoList","deleteAll","createAdjList","flexDirection","App","Boolean","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7bfecb9c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './css/ClientNode.css';\n\n\nexport default class Node extends Component{\n    render(){\n        return(\n            \n            <div id={this.props.id} className=\"client-node animated flipInX\" >\n                <svg style={{width:90,height:90,backgroundColor:this.props.color,borderRadius:150}} viewBox=\"5 -20 500 550\">\n\n                    <path fill=\"whitesmoke\" d=\"M256,0C114.623,0,0,114.614,0,256c0,141.377,114.623,256,256,256c141.386,0,256-114.623,256-256\n        C512,114.614,397.39,0,256,0z M363.479,384.004H148.521V274.666L256,167.188l107.479,107.47V384.004z M381.481,255.097\n        L256,129.629L130.528,255.101l-15.28-15.276L256.004,99.078l140.753,140.748L381.481,255.097z\"/>\n                </svg>\n                <div className=\"client-info\" style={{color:this.props.color,fontSize:12}}>\n                    <h4 style={{marginTop: -88}}>{this.props.clientNum}</h4>\n                    <div className=\"startEnd\" style={{marginTop:-30}}>\n                        <h4>{this.props.startDay}</h4>\n                        <h4>{this.props.endDay}</h4>\n                    </div>\n                    <h4 style={{marginTop:18}}>{this.props.revenue}</h4>\n                    \n                </div>\n            </div>       \n        )\n    }\n}","import React, {Component} from 'react';\nimport ClientNode from './ClientNode.jsx';\n\n\nexport default class Node extends Component{\n    \n    render(){\n        return(\n            <div className=\"adjlist-section\">\n                {\n                    this.props.list.map((clientNode,index)=>{\n                        let clientName = index;\n                        if(clientName === 0) clientName = \"start\";\n                        else if(clientName === this.props.list.length - 1) clientName = \"end\";\n                        return(\n                            <div className=\"adj-list\" id={\"client-list\" + Number(index+1)} key={'list-' +index}>\n                                <h2 id={'counter-'+clientName} style={{display:\"none\"}}key={'counter'+index}>0</h2>\n                                <ClientNode\n                                key = {'vertex-'+ index}\n                                id = {'vertex-'+ clientNode.clientNum}\n                                clientNum = {clientNode.clientNum}\n                                startDay ={clientNode.startDay}\n                                endDay ={clientNode.endDay}\n                                revenue ={clientNode.revenue}\n                                color = {this.props.color}\n                                \n                                />\n                                {                                           \n                                    clientNode.neighbors.map((node,index)=>{\n                                        return(\n                                            <ClientNode\n                                            key = {'neighbor-'+ index}\n                                            id = {'vertex-'+ clientNode.clientNum + 'neighbor-' + node.clientNum}\n                                            clientNum = {node.clientNum}\n                                            startDay ={node.startDay}\n                                            endDay ={node.endDay}\n                                            revenue ={node.revenue}\n                                            color = {\"whitesmoke\"}\n                        \n                                            />\n                                        )\n                                    })\n                                }\n                            </div>\n                        )\n                    })\n                    \n                }\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport ClientNode from './ClientNode.jsx';\n\nexport default class Node extends Component{\n    render(){\n        const list = this.props.list;\n        const type = this.props.type;\n        return(\n            <div className ={type +\"-list\"}>\n                {\n                    list.map((clientNode,index)=>{\n                        return (\n                            <ClientNode \n                            key = {type + '-node-' + index}\n                            id = {type + '-node-' + clientNode.clientNum}\n                            clientNum = {clientNode.clientNum}\n                            startDay ={clientNode.startDay}\n                            endDay ={clientNode.endDay}\n                            revenue ={clientNode.revenue}\n                            color = {this.props.color}\n                            />\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport './css/Toolbar.css';\n\nexport default class Node extends Component{\n    openPopUp(option){\n        document.getElementById(option).style.display = \"block\";\n    }\n    closePopUp(option){\n        document.getElementById(option).style.display = \"none\";\n    }\n   \n    render(){\n        let clientList = this.props.list;\n        return(\n            <div className=\"toolbar\">\n                <h1>Finding Optimal Revenue and Path using Topological Sorting</h1>\n                <div className=\"toolbar-options\">\n                    <div className =\"dropdown\">\n                        <button>Test Data Examples</button>\n                        <div className=\"dropdown-content\">\n                            <a onClick={()=> this.openPopUp('example1')}>Data Example 1</a>\n                            <a onClick={()=> this.openPopUp('example2')}>Data Example 2</a>\n                            <a onClick={()=> this.openPopUp('example3')}>Data Example 3</a>\n                            <a onClick={()=> this.openPopUp('example4')}>Data Example 4</a>\n                        </div>\n                    </div>\n                    <div className=\"dropdown\">\n                        <button className=\"instructions\">Instructions</button>\n                        <div className=\"dropdown-content\">\n                            <a onClick={()=> this.openPopUp('assignment')} >Assignment/Motivation</a>\n                            <a onClick={()=> this.openPopUp('entering-data')}>Entering Data</a>\n                            <a onClick={()=> this.openPopUp('adj-step')}>Adjacency List</a>\n                            <a onClick={()=> this.openPopUp('topo-step')}>Topological Sort</a> \n                            <a onClick={()=> this.openPopUp('rev-step')}>Finding Optimal Revenue</a>\n                            <a onClick={()=> this.openPopUp('path-step')}>Finding Optimal Path</a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"pop-up-example\" id=\"example1\">\n                    <p>\n                    10 40 100 <br/>\n                    20 70 200 <br/>\n                    50 80 120 <br/>\n                    <br/>\n                    (CopyAndPaste)\n                    </p>\n                    <button onClick={()=> this.closePopUp(\"example1\")}>Close</button>\n\n                </div>\n                <div className=\"pop-up-example\" id=\"example2\">\n                    <p>\n                    10 40 100 <br/>\n                    10 20 50 <br/>\n                    20 70 200 <br/>\n                    50 80 120 <br/>\n                    70 100 200 <br/>\n                    <br/>\n                    (CopyAndPaste)\n                    </p>\n                    <button onClick={()=> this.closePopUp(\"example2\")}>Close</button>\n\n                </div>\n                <div className=\"pop-up-example\" id=\"example3\">\n                    <p>\n                    60 100 543 <br/>\n                    53 97 670 <br/>\n                    41 72 650 <br/>\n                    15 54 92 <br/>\n                    36 82 416<br/>\n                    15 37 283<br/>\n                    14 85 661<br/>\n                    9 90 210<br/>\n                    28 63 843<br/>\n                    32 61 887<br/>\n                    42 51 812<br/>\n                    <br/>\n                    (CopyAndPaste)\n                    </p>\n                    <button onClick={()=> this.closePopUp(\"example3\")}>Close</button>\n\n                </div>\n                <div className=\"pop-up-example\" id=\"example4\">\n                    <p>\n                    4 7 67<br/>\n                    7 8 33<br/>\n                    4 8 90<br/>\n                    1 5 96<br/>\n                    7 8 97<br/>\n                    4 10 70<br/>\n                    3 8 89<br/>\n                    4 10 54<br/>\n                    3 5 43<br/>\n                    3 4 70<br/>\n                    6 7 48<br/>\n                    8 9 34<br/>\n                    4 5 83<br/>\n                    3 9 63<br/>\n                    3 8 60<br/>\n                    1 4 24<br/>\n                    6 8 41<br/>\n                    3 9 33<br/>\n                    6 10 32<br/>\n                    1 8 32<br/>\n                    1 3 47<br/>\n                    <br/>\n                    (CopyAndPaste)\n                    </p>\n                    <button onClick={()=> this.closePopUp(\"example4\")}>Close</button>\n\n                </div>\n                <div className =\"pop-up-item\"id=\"assignment\">\n                    <p>Suppose you have a rental property for which you have received requests \n                        from potential clients in the following form: (start date, end date, amount willing to pay).\n                         At one time, only one client can use the property and the reward for renting out will be \n                         the amount they are willing to offer. Suppose, for example, the property is available \n                         over the next 100 days. The start and end dates will, therefore, be integers between 1 and 100. </p>\n                    <div className=\"data-images\">\n                        <div id=\"assignment-image1\"></div>\n                        <div id=\"assignment-image2\"></div>\n                        <div id=\"assignment-image3\"></div>\n                    </div>\n                    <button onClick={()=> this.closePopUp(\"assignment\")}>Close</button>\n                </div>\n\n                <div className =\"pop-up-item\"id=\"entering-data\">\n                    <p>Each client is represented but each line. In the example \n                    you can see that the first two lines are entered. Each client must\n                    contain a start day, end day, and revenue amount with space between\n                    them. You have the option to add or delete many clients as a time. After \n                    entering the data you will be able to see how the adjancey list is made. \n                    Throughout the program you will be able to control the speed of each process.</p>\n                    <div className=\"data-images\">\n                        <div id=\"entering-data-image1\"></div>\n                        <div id=\"entering-data-image2\"></div>\n                        <div id=\"entering-data-image3\"></div>\n                    </div>\n                    <button onClick={()=> this.closePopUp(\"entering-data\")}>Close</button>\n                </div>\n\n                <div className =\"pop-up-item\"id=\"adj-step\">\n                    <p>Each client can be represented as a vertex. Directed edges between clients indicate \n                        that there is no conflict between the days they want the rental property. When the\n                        client turns <span style={{color:\"red\"}}>red</span> it means it is being compared to another client. \n                        When they turn <span style={{color:\"green\"}}>green</span> it means that an edge (Client i -> Client j) can be created or neighbor because the Client j's Start Day \n                        is greater than or equal to Client i's Start Day. Two special conditions are also applied:\n                        1. When a client does not have any incoming edges, we add them to the Starting Client\n                        (Start->Client i) 2. When a client does not have any neighbors, we add an End Client\n                        (Client i->End). Neighbors will be shown and added underneath their client vertex.\n                        </p>\n                    <div className=\"adj-images\">\n                        <div className=\"adj-images2\">\n                            <div id=\"adj-image1\"></div>\n                            <div id=\"adj-image2\"></div>\n                        </div>\n                        <div id=\"adj-image3\"></div>\n                    </div>\n                    <button onClick={()=> this.closePopUp(\"adj-step\")}>Close</button>\n                </div>\n\n                <div className =\"pop-up-item\"id=\"topo-step\">\n                    <p>The numbers over the vertecies represent incoming edges. The \n                        <span tyle={{color:\"#5acfc9\"}}>teal</span> colors represent an incoming edge\n                        being counted in compared with a client vertex to each neighbor. After all the\n                        incoming edges are counted, Topological BFS will be applied starting with the vertex with 0\n                        incoming edges and continue to queue(in black) and pop all clients in the queues\n                        order into a Topological sorted list.</p>\n                    <div className=\"data-images\">\n                        <div id=\"topo-image1\"></div>\n                        <div id=\"topo-image2\"></div>\n                    </div>\n                    <button onClick={()=> this.closePopUp(\"topo-step\")}>Close</button>\n                    <button onClick={()=>this.openPopUp(\"topo-step2\")}>Next</button>\n                </div>\n                <div className =\"pop-up-item\"id=\"topo-step2\">\n                    <p>The numbers over the vertecies represent incoming edges. The \n                        <span tyle={{color:\"#5acfc9\"}}>teal</span> colors represent an incoming edge\n                        being counted in compared with a client vertex to each neighbor. After all the\n                        incoming edges are counted, Topological BFS will be applied starting with the vertex with 0\n                        incoming edges and continue to queue(in black) and pop all clients in the queues\n                        order into a Topological sorted list.\n                    </p>\n                    <div className=\"data-images\">\n                        <div id=\"topo-image3\"></div>\n                        <div id=\"topo-image4\"></div>\n                    </div>\n                    <button onClick={()=> this.closePopUp(\"topo-step2\")}>Close</button>\n                </div>\n                <div className =\"pop-up-item\"id=\"rev-step\">\n                    <p>Using the Topological Sorted List we start at the end of the list (or\n                        in reverse the list) and start with that client for comparisons. Each \n                        vertex revenue will be added to each neighbor's revenue(in red) and choose the\n                        neighbor that summed the largest revenue (in green). By then end the Optimal Revenue\n                        will be shown.</p>\n                    <div className=\"data-images\">\n                        <div id=\"rev-image1\"></div>\n                        <div id=\"rev-image2\"></div>\n                        <div id=\"rev-image3\"></div>\n                    </div>\n                    <button onClick={()=> this.closePopUp(\"rev-step\")}>Close</button>\n                </div>\n                \n                <div className =\"pop-up-item\"id=\"path-step\">\n                    <p>The path taken to find the Optimal Revenue will be highlighted in \n                        <span style={{color:\"#fdd036\"}}>yellow</span>. By the end\n                        the Optimal Path will be shown.\n                    </p>\n                    <div className=\"data-images\">\n                        <div id=\"path-image1\"></div>\n                        <div id=\"path-image2\"></div>\n                    </div>\n                    <button onClick={()=> this.closePopUp(\"path-step\")}>Close</button>\n                    <button onClick={()=> this.openPopUp(\"path-step2\")}>Next</button>\n\n                </div>\n                <div className =\"pop-up-item\"id=\"path-step2\">\n                    <p>The path taken to find the Optimal Revenue will be highlighted in \n                        <span style={{color:\"#fdd036\"}}>yellow</span>. By the end\n                        the Optimal Path will be shown.</p>\n                    <div className=\"data-images\">\n                        <div id=\"path-image3\"></div>\n                    </div>\n                    <button onClick={()=> this.closePopUp(\"path-step2\")}>Close</button>\n                </div>\n            </div>\n        )\n    }\n}\n","export function Node(){\n    this.clientNum = 'start'; //0 CLIENT NUM\n    this.startDay = 0; //1 START \n    this.endDay = 0; //2 END\n    this.revenue = 0; //3 REVENUE\n    this.incomingEdges = 0; //4 IE\n    this.neighbors = [];\n    //this.next = null; //5 NEXT\n    this.clientsTaken = []; //6 CLIENTS TAKEN ARRAY\n    //let node =[0,0,0,0,0,null,[]]\n    //return node;\n}\nfunction copyNode(originalNode){\n    let copy = new Node();\n    copy.clientNum = originalNode.clientNum;\n    copy.startDay = Number(originalNode.startDay);\n    copy.endDay = Number(originalNode.endDay);\n    copy.revenue = Number(originalNode.revenue);\n    copy.neighbors = originalNode.neighbors;\n    if(originalNode.incomingEdges ===  'none')    \n        copy.incomingEdges = 0;\n \n    else{\n        copy.incomingEdges = Number(originalNode.incomingEdges + 1);\n        originalNode.incomingEdges = copy.incomingEdges;\n    }\n    copy.clientsTaken = originalNode.clientsTaken;\n    return copy\n}\nfunction addEdge(client1,client2){\n    let client2Copy = copyNode(client2);\n    client1.neighbors.push(client2Copy);\n}\n\nlet animations = [];\nexport const getAdjAnimations = ()=>{\n    return animations;\n}\nexport const createAdjList = clientList =>{\n    let adjList = []\n    const startNode = new Node();\n    adjList.push(startNode);\n    const mainColor =\"#fa9f42\";\n    const comparedColor = \"#f3533a\";\n    const matchColor = \"#8ad879\";\n    const neighborColor = \"#fcc893\";\n    //const hideColor = \"whitesmoke\";\n    let clientListSize = clientList.length;\n    console.log(clientList);\n    for(let i = 0; i < clientListSize; i++){\n        let newClient = new Node();\n        newClient = copyNode(clientList[i]);\n        adjList.push(newClient);\n    }\n    let adjListSize = adjList.length;\n    for(let i = 1; i < adjListSize; i++){\n        for(let j = 1; j < adjListSize; j++){\n            if(i === j) continue;\n            else if(adjList[i].endDay<= adjList[j].startDay){\n                addEdge(adjList[i],adjList[j]);\n                animations.push(\n                    {\n                        clientID: \"vertex-\" + adjList[i].clientNum,\n                        color: comparedColor\n                    },\n                    {\n                        clientID: \"vertex-\" + adjList[j].clientNum,\n                        color: comparedColor\n                    },\n                    {\n                        clientID: \"vertex-\" + adjList[i].clientNum,\n                        color: matchColor\n                    },\n                    {\n                        clientID: \"vertex-\" + adjList[j].clientNum,\n                        color: matchColor\n                    },\n                    {\n                        clientID: 'vertex-'+ adjList[i].clientNum + 'neighbor-' + adjList[j].clientNum,\n                        color: neighborColor\n                    }\n                    \n                )\n            }\n            else{\n                animations.push(\n                    {\n                        clientID: \"vertex-\" + adjList[i].clientNum,\n                        color: comparedColor\n                    },\n                    {\n                        clientID: \"vertex-\" + adjList[j].clientNum,\n                        color: comparedColor\n                    }\n                );\n                \n            }\n            animations.push(\n                {\n                    clientID: \"vertex-\" + adjList[i].clientNum,\n                    color: mainColor\n                },\n                {\n                    clientID: \"vertex-\" + adjList[j].clientNum,\n                    color: mainColor\n                }\n            );\n\n        }\n    }\n    const endNode = new Node();\n    endNode.clientNum = 'end';\n    adjList.push(endNode);\n    for(let i = 1; i < adjList.length-1; i++){\n        if(adjList[i].incomingEdges === 0){\n            animations.push(\n                {\n                    clientID: \"vertex-\" + adjList[i].clientNum,\n                    color: matchColor\n                },\n                {\n                    clientID: \"vertex-\" + adjList[i].clientNum,\n                    color: mainColor\n                },\n                {\n                    clientID: 'vertex-startneighbor-' + adjList[i].clientNum,\n                    color: neighborColor\n                }\n            );\n            addEdge(startNode,adjList[i]);\n            \n        }\n        if(adjList[i].neighbors.length === 0){\n            animations.push(\n                {\n                    clientID: \"vertex-\" + adjList[i].clientNum,\n                    color: matchColor\n                },\n                {\n                    clientID: \"vertex-\" + adjList[i].clientNum,\n                    color: mainColor\n                },\n                {\n                    clientID: 'vertex-'+ adjList[i].clientNum +'neighbor-end',\n                    color: matchColor\n                },\n                {\n                    clientID: 'vertex-'+ adjList[i].clientNum +'neighbor-end',\n                    color: neighborColor\n                }\n            );\n            addEdge(adjList[i],endNode);\n        }\n    }\n    console.log(adjList);\n    return adjList;\n}","let animations = [];\nexport const createTopoList = adjList =>{\n    const topoList = [];\n    const count = []\n    const queue = new Queue();\n    let vertex;\n    const adjListSize = adjList.length;\n    const mainColor = \"#fa9f42\";\n    const topoColor = \"#5acfc9\"\n    const neighborColor = \"#fcc893\";\n\n    const queueColor = \"black\";\n    // const comparedColor = \"#f3533a\";\n    // const matchColor = \"#8ad879\";\n    for(vertex = 0; vertex < adjListSize; vertex++) count.push(0);\n    for(vertex = 0; vertex < adjListSize; vertex++){\n        let vertexName = 'vertex-'+ adjList[vertex].clientNum;\n        animations.push(\n            {\n                clientID: vertexName,\n                color: topoColor\n            }\n        );\n        let neighborList = adjList[vertex].neighbors;\n        let neighborListSize = neighborList.length;\n        let neighbor;\n        for(neighbor = 0; neighbor < neighborListSize; neighbor++){\n            let neighborClientNum = neighborList[neighbor].clientNum;\n            let neighborClientName = neighborList[neighbor].clientNum;\n            if(neighborClientNum === \"end\")\n                neighborClientNum = adjListSize - 1;\n            \n            count[neighborClientNum]++;\n            animations.push(\n                {\n                    clientID: vertexName + 'neighbor-'+ neighborClientName,\n                    color: topoColor\n                },\n                {\n                    clientID: 'counter-'+ neighborClientName,\n                    count: count[neighborClientNum]\n                },\n                {\n                    clientID: vertexName + 'neighbor-'+ neighborClientName,\n                    color: neighborColor\n                },\n            );\n        }\n        animations.push(\n            {\n                clientID: vertexName,\n                color: mainColor\n            }\n        );\n    }\n    for(vertex = 0; vertex < adjListSize; vertex++){\n        if(count[vertex] === 0){\n            queue.push(adjList[vertex]);\n            animations.push({\n                clientID: \"vertex-\"+ adjList[vertex].clientNum,\n                color: queueColor\n            });\n            \n        }\n    }\n    while(!queue.size() == 0){\n        topoList.push(queue.front());\n        let neighborList = queue.front().neighbors;\n        let topoName = \"topo-node-\" + queue.front().clientNum;\n        let vertexName = \"vertex-\" + queue.front().clientNum;\n        animations.push(\n            {\n                clientID: topoName,\n                color: topoColor\n            },\n            {\n                clientID: vertexName,\n                color: mainColor\n            },\n\n        );\n        queue.pop();\n        \n        let neighborListSize = neighborList.length;\n        let neighbor;\n        for(neighbor = 0; neighbor < neighborListSize; neighbor++){\n            let neighborClientNum = neighborList[neighbor].clientNum;\n            let neighborClientName = neighborList[neighbor].clientNum;\n            if(neighborClientNum === \"end\")\n                neighborClientNum = adjListSize - 1;\n            count[neighborClientNum]--;\n            animations.push(\n                {\n                    clientID: vertexName +\"neighbor-\"+ neighborClientName,\n                    color: topoColor\n                },\n                {\n                    clientID: 'counter-'+ neighborClientName,\n                    count: count[neighborClientNum]\n                },\n                {\n                    clientID: vertexName +\"neighbor-\"+ neighborClientName,\n                    color: neighborColor\n                },\n\n            );\n            if(count[neighborClientNum] === 0){\n                queue.push(adjList[neighborClientNum]);\n                animations.push(\n                    {\n                        clientID: \"vertex-\"+ adjList[neighborClientNum].clientNum,\n                        color: queueColor\n                    }\n                );\n            }\n        }\n    }\n    return topoList;\n}\nexport const getTopoAnimations = ()=>{\n    return animations;\n}\n\n//Q\nfunction Queue() {\n    this.data = [];\n}\nQueue.prototype.push = function(record) {\n    this.data.unshift(record);\n}\nQueue.prototype.pop = function() {\n    this.data.pop();\n}\nQueue.prototype.first = function() {\n    return this.data[0];\n}\nQueue.prototype.front = function() {\nreturn this.data[this.data.length - 1];\n}\nQueue.prototype.size = function() {\nreturn this.data.length;\n}","let pathAnimations = [];\nlet path = [];\nlet optimalRevenue = 0;\nexport const getPath = ()=>{\n    return path;\n}\nexport const getOptPath = ()=>{\n    return pathAnimations;\n}\nexport const getOptRev = ()=>{\n    return optimalRevenue;\n}\nexport const findOptimalPath = (copyTopoList,copyAdjList) => {\n    const topoListSize = copyTopoList.length;\n    const comparedColor = \"#f3533a\";\n    const matchColor = \"#8ad879\";\n\n    let maxRevenues = [];\n    let animations = [];\n    for(var maxRev = 0; maxRev < topoListSize; maxRev++){\n        maxRevenues.push(0)\n    }\n    let vertex;\n    //console.log(document.getElementsByClassName(\"topoSort-section\"));\n    for(vertex = 0; vertex < topoListSize; vertex++){\n        let topoClientName = 'topo-node-' + copyTopoList[vertex].clientNum;\n        let topoClientNum = copyTopoList[vertex].clientNum;\n        if(topoClientNum === 'start')\n            topoClientNum = 0;\n        else if(topoClientNum === 'end')\n            topoClientNum = topoListSize -1;\n        let adjVertexClientName = 'vertex-' + copyAdjList[topoClientNum].clientNum;\n        animations.push(\n            {\n                clientID: topoClientName,\n                color: comparedColor\n            }\n        );\n        animations.push(\n            {\n                clientID: adjVertexClientName,\n                color: comparedColor\n            }\n        );\n        let revenues = [];\n        for(var rev = 0; rev < topoListSize; rev++){\n            revenues.push(0)\n        }\n        let neighborList = copyAdjList[topoClientNum].neighbors;\n        let neighborListSize = neighborList.length;\n        if(neighborListSize === 0)\n            revenues[topoClientNum] = copyAdjList[topoClientNum].revenue;\n        let neighbor;\n        for(neighbor = 0; neighbor < neighborListSize;neighbor++){\n            let neighborClientNum = neighborList[neighbor].clientNum;\n            let neighborClientName = neighborList[neighbor].clientNum;\n            if(neighborClientNum === 'start')\n                neighborClientNum = 0;\n            else if(neighborClientNum === 'end')\n                neighborClientNum = topoListSize -1;\n            revenues[neighborClientNum] = copyTopoList[vertex].revenue + maxRevenues[neighborClientNum];\n            animations.push(\n                {\n                    clientID: (adjVertexClientName + 'neighbor-' + neighborClientName),\n                    color: comparedColor\n                },\n                {\n                    clientID: (adjVertexClientName + 'neighbor-' + neighborClientName),\n                    updatedRev: revenues[neighborClientNum]\n                }\n            );\n        }\n        var max = 0;\n        var maxIndex = 0;\n        var revenueSize = revenues.length;\n        for(var revenue = 0; revenue < revenueSize; revenue++){\n            if(revenues[revenue] > max){\n                maxIndex = revenue;\n                max = revenues[revenue];\n            }\n        }\n        if(maxIndex !== 0){\n            if(neighborListSize === 0){ \n                max = revenues[topoClientNum];\n                animations.push(\n                    {\n                        clientID: adjVertexClientName,\n                        updatedRev : max\n                    },\n                )\n                let taken = copyAdjList[maxIndex].clientsTaken;\n                copyAdjList[topoClientNum].clientsTaken = taken.slice(); // instead of copyAdjList[topoClientNum].clientsTaken = copyAdjList[maxIndex].clientsTaken\n                copyAdjList[topoClientNum].clientsTaken.push(maxIndex); // bc .slice() clones the array and returns a reference to a new array\n                maxRevenues[topoClientNum] += max;\n                continue;\n            }\n            animations.push(\n                {\n                    clientID: adjVertexClientName + 'neighbor-'+ copyAdjList[maxIndex].clientNum,\n                    updatedRev : max\n                },\n                {\n                    clientID: adjVertexClientName + 'neighbor-'+ copyAdjList[maxIndex].clientNum,\n                    color : matchColor\n                }\n                \n            );\n        }\n        let taken = copyAdjList[maxIndex].clientsTaken;\n        copyAdjList[topoClientNum].clientsTaken = taken.slice(); // instead of copyAdjList[topoClientNum].clientsTaken = copyAdjList[maxIndex].clientsTaken\n        copyAdjList[topoClientNum].clientsTaken.push(maxIndex); // bc .slice() clones the array and returns a reference to a new array\n        maxRevenues[topoClientNum] += max;\n    }\n    let optPath = copyAdjList[0].clientsTaken.reverse();\n    optPath.splice(-2,2);\n    path = optPath;\n    optPath.push(\"end\");\n    const optimalColor = \"#fdd036\";\n    pathAnimations.push(\n        {\n            clientID: 'vertex-start',\n            color : optimalColor\n        },\n        {\n            clientID: 'vertex-startneighbor-' + optPath[0],\n            color : optimalColor\n        },\n    );\n    var i;\n    for(i = 0; i < optPath.length-1; i++){\n        let vertexName = 'vertex-' +optPath[i];\n        for(var j = i+1; optPath.length;j++){\n            pathAnimations.push(\n                {\n                    clientID: vertexName,\n                    color : optimalColor\n                },\n                {\n                    clientID: vertexName + 'neighbor-'+optPath[j],\n                    color : optimalColor\n                },\n            );\n            break;\n\n        }\n    }\n    optimalRevenue = maxRevenues[0];\n    console.log(optPath);\n    console.log(\"Clients contributing to this optimal revenue: \");\n    for(i = 0; i < optPath.length;i++)\n        console.log(optPath[i]);\n    return animations;\n}","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/TopoSortVis.css';\nimport ClientNode from './ClientNode.jsx';\nimport AdjList from './AdjList.jsx';\nimport List from './List.jsx';\nimport Toolbar from './Toolbar.jsx';\nimport * as adjFunctions from './Algorithms/AdjList.js';\nimport * as topoFunctions from './Algorithms/TopoSort.js';\nimport * as optFunctions from './Algorithms/Optimal.js';\nimport * as helperFunctions from './HelperFunctions.js';\n\nconst mainColor = \"#fa9f42\";\nconst hiddenColor = \"whitesmoke\";\nconst optimalColor = \"#fdd036\";\nexport default class Visualizer extends Component{\n    \n    constructor(){\n        super();\n        this.speed = 0;\n        this.clientCount = 0;\n        this.state = {\n            clientList: [],\n            adjList: [],\n            topoList: [],\n            optimalPath:[],\n            ClientNum:\"\",\n            StartDay :\"\",\n            EndDay: \"\",\n            Revenue: \"\",\n            IncomingEdges:\"\",\n            Neighbors: [],\n            ClientsTaken:[],\n            color : mainColor\n        }\n    }\n    componentDidMount(){\n        this.resetClientList();\n    }\n    resetClientList(){\n        const clientList = [];\n        const adjList = [];\n        const topoList = [];\n        this.clientCount = 0;\n        this.speed = 0;\n        this.setState({clientList,adjList,topoList});\n    }\n    \n    addAllClients = (event) =>{\n        const copyClientList = Object.assign([],this.state.clientList);\n        event.preventDefault(); //keeps page from reloading \n        const textareaValue = ReactDOM.findDOMNode(this.refs.ci).value;\n        //uses ref to get value just like document.getElementbyID\n        ReactDOM.findDOMNode(this.refs.ci).value = '' //clears textarea on the page\n\n        if(textareaValue === \"\"){\n            alert(\"Text required\");\n            this.resetClientList();\n        }else{\n            const userInputs = helperFunctions.parseTextArea(textareaValue);\n            for(let i = 0;i < userInputs.length;i++){\n                this.clientCount = this.clientCount+1\n                let startEndRev = userInputs[i].split(' ');\n                const digits_only = string => [...string].every(c => '0123456789'.includes(c));\n                var index;\n                if(startEndRev.includes(\"\")){\n                    index = startEndRev.indexOf(\"\");\n                    startEndRev.splice(index);\n                }else if(startEndRev.includes(\" \")){\n                    index = startEndRev.indexOf(\" \");\n                    startEndRev.splice(index);\n                }\n                if(startEndRev.length != 3 \n                || !digits_only(startEndRev[0])    \n                || !digits_only(startEndRev[1]) \n                || !digits_only(startEndRev[2])\n                || startEndRev.length != 3){\n                    alert(\"Not proper format! No letters, extra spaces, or special symbols allowed!\");\n                    this.resetAll();\n                }else{\n                    let clientInfo = {\n                        clientNum : this.clientCount,\n                        startDay: startEndRev[0],\n                        endDay: startEndRev[1],\n                        revenue: startEndRev[2],\n                        incomingEdges: 'none',\n                        neighbors: [],\n                        clientsTaken: []\n                    }\n                    copyClientList.push(clientInfo);\n                }\n            }\n            let deleteButton = document.getElementsByClassName(\"delete-clients-button\");\n            let adjListButton = document.getElementsByClassName(\"create-adj-button\");\n            let speedButtons = document.getElementsByClassName(\"speed-section\");\n\n            deleteButton[0].style.display = \"flex\";\n            adjListButton[0].style.display = \"flex\";\n            speedButtons[0].style.display = \"flex\";\n\n            this.setState({\n                clientList : copyClientList\n            })  \n        }\n    }\n    deleteAll(){\n        const copyClientList = [];\n        const copyAdjArray = [];\n        const copyTopoArray = [];\n        this.clientCount = 0;\n        this.incomingEdges = 'none'\n        this.neighbors = [];\n        this.clientsTaken = [];\n        \n        let deleteButton = document.getElementsByClassName(\"delete-clients-button\");\n        let adjListButton = document.getElementsByClassName(\"create-adj-button\");\n        let speedButtons = document.getElementsByClassName(\"speed-section\");\n\n        deleteButton[0].style.display = \"none\";\n        adjListButton[0].style.display = \"none\";\n        speedButtons[0].style.display = \"none\";\n\n        this.setState({\n            clientList : copyClientList,\n            adjList :copyAdjArray,\n            topoList : copyTopoArray\n        })\n    }\n    showPath = ()=>{\n        let newSetButton = document.getElementsByClassName(\"new-set-button\");\n        newSetButton[0].style.display = \"flex\";\n\n        let pathAnimations = optFunctions.getOptPath();\n        const copyOptimalPath = Object.assign([],this.state.optimalPath);\n        const copyAdjList = Object.assign([],this.state.adjList);\n\n        let path = optFunctions.getPath();\n        copyOptimalPath.push(copyAdjList[0]);\n        for(var i = 0; i < path.length-1;i++){\n            copyOptimalPath.push(copyAdjList[path[i]]);\n        }\n        copyOptimalPath.push(copyAdjList[copyAdjList.length-1]);\n        this.setState({\n            optimalPath : copyOptimalPath\n        })\n        let showPathButton = document.getElementsByClassName(\"show-path-button\");\n        showPathButton[0].style.display = \"none\";\n        for(var animation = 0; animation < pathAnimations.length;animation++){\n            let id = pathAnimations[animation].clientID;\n            let newColor = pathAnimations[animation].color;\n            setTimeout(()=>{\n                document.getElementById(id).children[0].style.backgroundColor = newColor;\n                document.getElementById(id).children[1].style.color = newColor; \n            },this.speed*animation);\n            if(animation === pathAnimations.length-1){\n                setTimeout(()=>{\n                    document.getElementById(\"optimal-path\").style.display = 'flex'; \n                    document.getElementById(\"optimal-path\").style.justifyContent = 'center';            \n           \n                },this.speed*pathAnimations.length);\n            }\n        }\n    }\n    findOptimal = ()=>{\n        const copyTopoList = Object.assign([],this.state.topoList).reverse();\n        const copyAdjList = Object.assign([],this.state.adjList);\n        for(var count = 0; count < copyAdjList.length; count++){\n            let counterName = count;\n            if(counterName === 0) counterName = \"start\";\n            else if(counterName === copyAdjList.length-1) counterName = \"end\";\n            let counter = document.getElementById(\"counter-\"+counterName);\n            counter.style.display = \"none\";\n        }\n        let animations = optFunctions.findOptimalPath(copyTopoList,copyAdjList);\n        let findOptimalButton = document.getElementsByClassName(\"find-optimal-button\");\n        findOptimalButton[0].style.display = \"none\";\n        for(var animation = 0; animation < animations.length;animation++){\n            if(animation === animations.length-1){\n                setTimeout(()=>{\n                    let optRev = optFunctions.getOptRev();\n                    document.getElementById('optimal-revenue').style.display = 'inline';\n                    document.getElementById('optimal-revenue').innerHTML = \"Optimal Revenue: \" + optRev;\n                    let showPathButton = document.getElementsByClassName(\"show-path-button\");\n                    showPathButton[0].style.display = \"flex\";\n                },this.speed*animations.length);\n            }\n            let id = animations[animation].clientID;\n            if(animations[animation].hasOwnProperty('color')){\n                let newColor = animations[animation].color;\n                setTimeout(()=>{\n                    document.getElementById(id).children[0].style.backgroundColor = newColor;\n                    document.getElementById(id).children[1].style.color = newColor; \n                },this.speed*animation);\n            }else{\n                let newRev = animations[animation].updatedRev;\n                setTimeout(()=>{\n                    document.getElementById(id).children[1].children[2].innerHTML = newRev;\n                    \n                },this.speed*animation);\n            }\n        }\n    }\n    createTopoList(){\n        let copyAdjList = Object.assign([],this.state.adjList);\n        let topoArray = topoFunctions.createTopoList(copyAdjList)\n        let topoAnimations = topoFunctions.getTopoAnimations();\n\n        let topoSortButton = document.getElementsByClassName(\"topo-sort-button\");\n        topoSortButton[0].style.display = \"none\";\n\n        this.setState({\n            topoList : topoArray\n        });\n\n        for(var count = 0; count < copyAdjList.length; count++){\n            let counterName = count;\n            if(counterName === 0) counterName = \"start\";\n            else if(counterName === copyAdjList.length-1) counterName = \"end\";\n            let counter = document.getElementById(\"counter-\"+counterName);\n            counter.style.display = \"inline\";\n        }\n        for(var animation = 0; animation < topoAnimations.length;animation++){\n            if(animation === topoAnimations.length-1){\n                setTimeout(()=>{\n                    let findOptimalButton = document.getElementsByClassName(\"find-optimal-button\");\n                    findOptimalButton[0].style.display = \"flex\";\n                },this.speed*topoAnimations.length);\n                \n            }\n            let id = topoAnimations[animation].clientID;\n            if(topoAnimations[animation].hasOwnProperty('count')){\n                let newCount = topoAnimations[animation].count;\n                setTimeout(()=>{\n                    document.getElementById(id).innerHTML = newCount;\n                },this.speed*animation);\n            }else{\n                let newColor = topoAnimations[animation].color;\n                setTimeout(()=>{\n                    document.getElementById(id).children[0].style.backgroundColor = newColor;\n                    document.getElementById(id).children[1].style.color = newColor; \n                },this.speed*animation);\n            }\n\n        }\n    }\n    createAdjList(){\n        let copyClientList = Object.assign([],this.state.clientList);\n        let adjArray = adjFunctions.createAdjList(copyClientList);\n        let adjAnimations = adjFunctions.getAdjAnimations();\n        this.setState({\n            adjList : adjArray\n        });\n        \n        let clientForm = document.getElementsByClassName(\"client-form\");\n        let clientSection = document.getElementsByClassName(\"client-section\");\n        let deleteButton = document.getElementsByClassName(\"delete-clients-button\");\n        let adjListButton = document.getElementsByClassName(\"create-adj-button\");\n        let topoSortButton = document.getElementsByClassName(\"topo-sort-button\");\n\n        clientForm[0].style.display = \"none\";\n        clientSection[0].style.display = \"none\";\n        deleteButton[0].style.display = \"none\";\n        adjListButton[0].style.display = \"none\";\n\n\n  \n        for(var animation = 0; animation < adjAnimations.length;animation++){\n            let id = adjAnimations[animation].clientID;\n            let newColor = adjAnimations[animation].color;\n            setTimeout(()=>{\n                document.getElementById(id).children[0].style.backgroundColor = newColor;\n                document.getElementById(id).children[1].style.color = newColor; \n            },this.speed*animation);\n            if(animation === adjAnimations.length-1){\n                setTimeout(()=>{\n                    topoSortButton[0].style.display = \"flex\";\n                },this.speed*adjAnimations.length);\n                \n            }\n        }\n       \n\n    }\n    isLetter(str) {\n        let regex = new RegExp(/[A-Za-z]/);\n        if(regex.test(str)){\n            return true;\n        }\n        else return false;\n      }\n    resetAll(){\n        window.location.reload();//Reloads page\n    }\n    render(){\n        const{clientList} = this.state;\n        const{adjList} = this.state;\n        const{topoList} = this.state;\n        const{optimalPath} = this.state;\n        return (\n            <div className = \"container\">\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"//fonts.googleapis.com/css?family=Varela+Round\" />\n                <Toolbar     \n                    list = {clientList}\n                />\n                <div className = \"client-container\">\n                    <div className=\"client-section\">\n                        <List\n                        type = {\"client\"}\n                        list = {clientList}\n                        color = {mainColor}\n                        />\n                    </div>\n                    <div className=\"client-form\">\n                        <form>\n                            <textarea ref=\"ci\" cols=\"7\" rows=\"8\" \n                            placeholder=\"10 40 100 10 20 50...\" required>\n                            </textarea>\n                            <br/>\n                            <button className=\"button \"type=\"submit\" onClick ={this.addAllClients} >Add Clients </button>\n                        </form>\n                    </div>\n                    <div className=\"speed-section\">\n                        <h2>Speed: </h2>\n                        <div className=\"speed-buttons\">\n                            <button onClick={() => this.speed = 2000}>Slow</button>\n                            <button onClick={() => this.speed = 200}>Medium</button>\n                            <button onClick={() => this.speed = 50}>Fast</button>\n                            <button onClick={() => this.speed = 0}>Instant</button>\n                        </div>\n                    </div>\n                    <div className=\"button-section\">\n                        <button className=\"topo-sort-button\" style={{display:\"none\"}}onClick={() => this.createTopoList()}>Topological Sort</button>\n                        <button className=\"delete-clients-button\" style={{display:\"none\"}}onClick={() => this.deleteAll()}>Delete All Clients</button>\n                        <button className=\"create-adj-button\" style={{display:\"none\"}}onClick={() => this.createAdjList()}>Create Adjacency List</button>\n                        <button className=\"find-optimal-button\" style={{display:\"none\"}}onClick={() => this.findOptimal()}>Find Optimal Path and Revenue</button>\n                        <button className=\"show-path-button\" style={{display:\"none\"}}onClick={() => this.showPath()}>Highlight Path</button>\n                        <button className=\"new-set-button\" style={{display:\"none\"}}onClick={() => this.resetAll()}>New Set</button>\n                    </div>\n\n                    <h1 id=\"optimal-revenue\" style={{display:\"none\"}}>0</h1>\n                    <div className=\"optimal-section\">\n                        <div id=\"optimal-path\" style={{display:\"none\", flexDirection: \"row\"}}>\n                            <h1>Optimal Path: </h1>\n                            <List\n                            type = {\"opt\"}\n                            list = {optimalPath}\n                            color = {optimalColor}\n                            />\n                        </div>\n                    </div>\n                    <div className= \"topo-section\">\n                        <div className=\"topo-sort\">\n                            <List\n                            type = {\"topo\"}\n                            list = {topoList}\n                            color = {hiddenColor}\n                            />\n                        </div>\n                        <AdjList\n                        list ={adjList}\n                        color ={mainColor}\n                        />\n                    </div>    \n                </div>    \n            </div>\n        );\n    }\n    \n}","export const parseTextArea = textareaValue =>{\n    const clients = textareaValue.split('\\n');\n    if(clients.includes(\"\")){\n        alert(\"Not proper format! No letters, extra spaces, or special symbols allowed!\");\n    }else if(clients.includes(\" \")){\n        alert(\"Not proper format! No letters, extra spaces, or special symbols allowed!\");\n    }\n    return clients;\n\n}\n","import React from 'react';\nimport RentalProp from './main/RentalProp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RentalProp></RentalProp>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}